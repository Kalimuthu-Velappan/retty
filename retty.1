.TH RETTY 1 2006-08-14

.SH NAME
retty - Attach process running on another terminal

.SH SYNOPSIS
.B retty [-v] [-h] [-0 fd] [-1 fd] [-2 fd] PID

.SH DESCRIPTION

.B retty
is a simple tool which will let you attach process currently running on
another terminal. Unlike screen, you need to make no special provisions
in advance - just get the process' pid and attach it anytime.

Before using
.B retty
on a given application on a given system the first time, please make sure
it works on the system and for the application (start another instance and
try to attach it). It is unfortunately quite fragile and if your setup does
not match its taste, it can even crash the attached application. Some
applications won't work because they do I/O on other fds than 0, 1, 2 (that's
fixable), some applications won't work because they do I/O on
.B /dev/tty
(that's unfixable without kernel changes).
.B Trying to run retty on a kernel with security patches applied (non-exec stack in particular) will result in the attached process segfaulting immediatelly!

Non-violently killing
.B retty
should provide for a proper detach - after that,
the process can be used on the original terminal again. Multiple subsequent
.B retty
attachments of a single process are possible, but the process does I/O
only on the last one - don't forget to detach them in the right sequence,
or your application will break (in this case, it is maybe better to attach
already running retty than attaching single application twice).

You can also use escape sequences to detach a process and possibly do other
things. The escape character is "`" (lowercase of "~") and "`h" will give you
list of possible escape sequences. The escape character must be immediately
preceded by an enter.

By default,
.B retty
attaches file descriptors 0, 1 and 2 of the process. That should be enough 
in most cases, but will not do in some special ones. In such case, you have 
to check /proc/<PID>/fd and force
.B retty
to attach correct file descriptors instead. OpenSSH is one such program - it 
duplicates file descriptors and then uses duplicated ones. 

.RE
.SH OPTIONS
.TP
.B "\-v"
Display version information.
.TP
.B "\-h"
Display usage information.
.TP
.B "\-0 fd"
Specify file descriptor that process we want to attach uses as input.
Default value is 0 (stdin).
.TP
.B "\-1 fd"
Specify file descriptor that process we want to attach uses as output.
Default value is 1 (stdout).
.TP
.B "\-2 fd"
Specify file descriptor that process we want to attach uses for error
outputs. Default value is 2 (stderr).
.TP
.B PID
PID of process that we want to attach. If retty is run as ordinary user,
it can attach only processes owned by that user. If run as root, retty
can attach probably anything (not always good idea).

.RE
.SH BUGS
.PD
.IP \(bu
.I retty
is x86-specific and works only on Linux with executable stack.
.IP \(bu
The attached process' controlling terminal is not switched appropriately,
which causes many funny effects (e.g.
.I mutt
not properly adjusting for your
window size, but this can be fixed by going into editor and back) and annoying
bugs (ctrl+c not delivered properly).
.IP \(bu
If you attach
.I bash
it imagines EOF on stdin. Attaching and detaching multiple times without
any activity in the meantime will cause it to die.
.IP \(bu
Attempts to attach
.I less
just don't work even with input fd override. This might or might not be
fixed in the future, depending on cause (which is unknown now).
.IP \(bu
You must make sure both
.I retty
and the attached process run with the same uid. Running
.I retty
as root and attached process as regular user will
.B NOT
work.
.I su
to the same user first.
(This is because
.I retty
makes the attached process open a tty created by
.I retty
which fails since the attached process has insufficient permissions.
.I retty
should check uid of the target process and
.I chown
the tty accordingly.)

.RE
.SH "SEE ALSO"
blindtty(1), screen(1)
